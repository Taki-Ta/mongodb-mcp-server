name: Test Docker Build

on:
  workflow_dispatch:
  pull_request:
    paths:
      - 'Dockerfile'
      - '.dockerignore'
      - '.github/workflows/docker-build.yml'
      - 'package*.json'

jobs:
  test-build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build TypeScript
      run: npm run build
      
    - name: Test Docker build
      run: |
        # 构建Docker镜像但不保存
        docker build -t mongodb-mcp-server:test .
        
    - name: Test Docker run
      run: |
        # 启动容器进行基本测试
        docker run -d --name test-container \
          -e MDB_MCP_CONNECTION_STRING="mongodb://test:test@localhost:27017/test" \
          -e MDB_DB="test" \
          -p 8000:8000 \
          mongodb-mcp-server:test
        
        # 等待容器启动
        sleep 10
        
        # 检查容器状态
        docker ps -a
        
        # 检查容器日志
        docker logs test-container
        
        # 清理
        docker stop test-container
        docker rm test-container
        docker rmi mongodb-mcp-server:test
        
    - name: Verify Dockerfile best practices
      run: |
        # 检查Dockerfile是否遵循最佳实践
        echo "Checking Dockerfile..."
        
        # 检查是否使用了多阶段构建
        if grep -q "AS builder" Dockerfile && grep -q "AS production" Dockerfile; then
          echo "✅ Multi-stage build detected"
        else
          echo "❌ Multi-stage build not found"
          exit 1
        fi
        
        # 检查是否有健康检查
        if grep -q "HEALTHCHECK" Dockerfile; then
          echo "✅ Health check found"
        else
          echo "❌ Health check not found"
          exit 1
        fi
        
        # 检查是否暴露了端口
        if grep -q "EXPOSE" Dockerfile; then
          echo "✅ Port exposure found"
        else
          echo "❌ Port exposure not found"
          exit 1
        fi
        
        echo "Dockerfile validation passed!" 